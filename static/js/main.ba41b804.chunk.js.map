{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAGMA,G,MAAc,CAChBC,OAAS,CACLC,KAAK,uBACLC,SAAU,OAEdC,OAAS,CACLF,KAAM,mBACNC,SAAU,eA0BHE,EAdO,SAACC,GAEnB,IAVeC,EAAKC,EAUdC,GAVSF,EAUUD,EAAMC,KAVXC,GAUgB,IAAIE,MAAOC,YATpC,GAAKH,EAAQ,EACbD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAGHP,EAAaS,GAAhCP,EAHsB,EAGtBA,KAAMC,EAHgB,EAGhBA,SAEb,OACI,yBAAKS,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC7BlBU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,uBAAuBN,EAAMQ,WAKxDD,EAAQE,aAAe,CACnBD,QAAU,cAGCD,QCRTG,E,4MAUFC,MAAO,CACHV,IAAM,KACNW,aAAc,I,kEAGE,IAAD,OACfC,UAAUC,YAAYC,oBAClB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEhB,IAAKe,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEL,aAAcQ,EAAIZ,e,sCAK7C,OAAGa,KAAKV,MAAMC,eAAiBS,KAAKV,MAAMV,IAC/B,uCAAaoB,KAAKV,MAAMC,eAG/BS,KAAKV,MAAMC,cAAgBS,KAAKV,MAAMV,IAC/B,kBAAC,EAAD,CAAeA,IAAKoB,KAAKV,MAAMV,MAEnC,kBAAC,EAAD,CAASO,QAAQ,qC,+BAKzB,OACI,yBAAKF,UAAU,cACTe,KAAKC,qB,GArCJC,IAAMC,WA4CxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.ba41b804.chunk.js","sourcesContent":["import './seasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig ={\n    summer : {\n        text:'let\\'s hit the beach!',\n        iconName: 'sun'\n    },\n    winter : {\n        text: 'Burr it is cold!',\n        iconName: 'snowflake'\n    }\n}\n\nconst getSeason = (lat, month) => {\n    if(month > 2 && month < 9){\n        return lat > 0 ? 'summer' : 'winter';\n    }else {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n};\n\nconst SeasonDisplay = (props) => {\n\n    const season = getSeason(props.lat, new Date().getMonth());\n    const {text, iconName } = seasonConfig[season];\n\n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`}></i>\n            <h1>{text}</h1>\n            <i className={`icon-right massive ${iconName} icon`}></i>\n        </div>\n    );\n};\n\nexport default SeasonDisplay;","import React from 'react';\n\nconst Spinner = (props) => {\n    return(\n        <div className='ui active dimmer'>\n            <div className=\" ui big text loader\">{props.message}</div>\n        </div>\n    );\n};\n\nSpinner.defaultProps = { \n    message : 'Loading...'\n};\n\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner'\n\n\nclass App extends React.Component {\n    // constructor(props) {\n    //     super(props);\n\n    //     //This is the only time we do direct assignment\n    //     // to this.state\n    //     this.state = { lat: null, errorMessage: '' };\n\n    // }\n\n    state ={\n        lat : null,\n        errorMessage: ''\n    };\n\n    componentDidMount(){\n        navigator.geolocation.getCurrentPosition(\n            position => this.setState({ lat: position.coords.latitude}),\n            err => this.setState({ errorMessage: err.message })\n        );\n    }\n    \n    renderContent() {\n        if(this.state.errorMessage && !this.state.lat){\n            return <div>Error: {this.state.errorMessage}</div>\n        }\n\n        if(!this.state.errorMessage && this.state.lat){\n            return <SeasonDisplay lat={this.state.lat} />\n        }\n        return <Spinner message=\"Please accept location request\"/>\n    }\n\n\n    render(){\n       return (\n           <div className=\"border red\">\n                {this.renderContent()}\n           </div>\n       );\n    }\n}\n\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}